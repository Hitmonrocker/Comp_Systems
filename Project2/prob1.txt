PROBLEM 1 C
i)  All of these results of course depend on where these signals/interrupts are used in the program.  For sake of argument all of these signals and interrupts were used at the start of the program for all results.  However if they were used later on, between processes for instance, then the program would execute as much as it can before being interrupted by one of these signals.  That being said, with the default handlers we observed:
CTRL+C: Interupts the program when it reads the input from the user.  
SIGQUIT: Quits out of the program and prints quit where the signal was raised in the code.  
SIGSTOP: Stops the program.  This is different than quit because technically the program is still "on", it just stopped execution when the signal was raised.  Obzerved [1]+ Stopped added to our output file.  
SIGSTP:  This is similar to SIGSTOP except instead of being raised by the program it is inputted from the user, often with CTRL+Z.  Observed [2]+ Stopped added to our output. 
SIGABRT: Often caused by heap overflows.  When raised manually Aborted was added to our output
SIGTERM: Printed Terminated in our output with the standard handler.  
SIGKILL: Printed Killed in our output file.  
CUSTOM SIGNAL:  For our custom signal we changed the handler of SIGUSR1 to a handler that attempts to divide by zero.  This process triggers a floating point exception which interrupts the program and dumps the core. 
Ending a specific process:  This can be done with kill() instead of raise().  The syntax for kill is kill(pid_t pid, int signum);  So we can choose what specific pid to send the signal to.  If we set it to zero all the children will receive the signal.  Obviously, depending on which process is interrupted and with what determines the output of the program.  