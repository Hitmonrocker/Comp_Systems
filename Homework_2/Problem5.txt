a) Describe how the compare_and_swap() instruction can be used to provide mutual exclusion
that satisfies the bounded-waiting requirement.

	The Compare and swap function can rpovide mutual exclusion by comparing a value and settnig based on the comparison for isntance switching a lock between the value of true and flase (0,1); Calling compare and swap will swap if the value entered matches the value of lock currently it returns true otherwise it is false

Pseudo-Code:
	for implementation of compare and swap

int Compare_And_swap(int* value, int old,int new){
    if *p != old {
        return 0 (false);
    }
    *p = new
    return 1 (true);
}

b) Consider how to implement a mutex lock using an atomic hardware instruction. Assume that the
following structure defining the mutex lock is available:
	

typedef struct {
	 int available;
	}
lock;

 where (available == 0) indicates the lock is available; a value of 1 indicates the lock is unavailable.
Using this struct, illustrate how the following functions may be implemented using the test_and_set()
and compare_and_swap() instructions.
	• void acquire(lock *mutex)
	• void release(lock *mutex)
Be sure to include any initialization that may be necessary.

int my_pthread_mutex_init(my_pthread_mutex_t* mutext){

	//Return error code if cannot init mutex
	if (mutex == NULL) {
		return EINVAL;
	}
	mutex->available = 0;

	return 0;   // return if successful
}

int my_pthread_mutex_Acquire(my_pthread_mutex_t* mutex){

	if (mutex == NULL) return EINVAL; 

    int ret = mutex->available;
    * mutex->available = 1;
    return ret;
}

int my_pthread_mutex_Release(my_pthread_mutex_t* mutex){
	{
    *mutex->available = 0;
	return 0;
}
//------------------------OR--------------------------------\\

int my_pthread_mutex_Acquire(my_pthread_mutex_t* mutex){

	if (mutex == NULL) return EINVAL; 
	__sync_lock_test_and_set ( mutex->available,1);
}

int my_pthread_mutex_Release(my_pthread_mutex_t* mutex){
	{
 	__sync_lock_test_and_set ( mutex->available,0);
}

c) Show how to implement the wait() and signal() semaphore operations in multiprocessor
environments using test and set() instruction. 


int wait()
{
	return my_pthread_mutex_Acquire(&lock);
}
int signal()
{
	my_pthread_mutex_Release(&lock);
	return 0;
}

do {
    while(wait()); // do nothing
        // critical section

    my_pthread_mutex_Release(&lock);
        // remainder section
        
} while(TRUE);
